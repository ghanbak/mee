<?php

// Include the file with the field UI functions.
require_once dirname(__FILE__) . '/mee.field.inc';

/**
 * Implements hook_menu
 *
 * @author JaceRider
 */
function mee_menu(){
  $items['mee/iframe'] = array(
    'page callback' => 'mee_iframe_page',
    'delivery callback' => 'mee_deliver_html_page',
    'access arguments' => array('access content'),
    'file' => 'mee.iframe.inc',
    //'delivery callback' => 'core_ajax_deliver',
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_theme().
 *
 * @author JaceRider
 */
function mee_theme() {
  return array(
    'mee_iframe' => array(
      'variables' => array('iframe' => array()),
      'template' => 'theme/mee.iframe',
    ),
    'mee_config_form_buttons' => array(
      'render element' => 'element'
    ),
  );
}

function mee_field_widget_form_alter(&$element, &$form_state, $context){
  $field = $context['field'];
  if(in_array($field['type'], mee_allowed_field_types())){

    /**
     * Buttons
     */

    // $settings['buttons']['bold'] = array(
    //   'label' => '<i class="icon-bold"></i>',
    //   'tip' => t('Bold - Ctrl+B'),
    //   'key' => 'ctrl+b',
    //   'group' => 'font'
    // );

    // $settings['buttons']['italic'] = array(
    //   'label' => '<i class="icon-italic"></i>',
    //   'tip' => t('Italic - Ctrl+I'),
    //   'key' => 'ctrl+i',
    //   'group' => 'font'
    // );

    // $settings['buttons']['heading'] = array(
    //   'label' => 'Heading',
    //   'type' => 'select',
    //   'options' => array(
    //     0 => 'Normal',
    //     2 => 'Heading 2'
    //   ),
    //   'tip' => t('Heading - Ctrl+H'),
    //   'key' => 'ctrl+h',
    //   'group' => 'font'
    // );

    // $settings['buttons']['ul'] = array(
    //   'label' => '<i class="icon-list"></i>',
    //   'tip' => t('Bulleted List - Ctrl+U'),
    //   'key' => 'ctrl+u',
    //   'group' => 'list'
    // );

    // $settings['buttons']['ol'] = array(
    //   'label' => '<i class="icon-list-numbered"></i>',
    //   'tip' => t('Numbered List - Ctrl+O'),
    //   'key' => 'ctrl+o',
    //   'group' => 'list'
    // );

    // $settings['buttons']['link'] = array(
    //   'label' => '<i class="icon-link"></i>',
    //   'tip' => t('Link - Ctrl+L'),
    //   'key' => 'ctrl+l',
    //   'group' => 'other'
    // );

    // $settings['buttons']['blockquote'] = array(
    //   'label' => '<i class="icon-quote"></i>',
    //   'tip' => t('Blockquote - Ctrl+Q'),
    //   'group' => 'other'
    // );

    // $settings['buttons']['rule'] = array(
    //   'label' => '<i class="icon-minus"></i>',
    //   'tip' => t('Horizontal Rule - Ctrl+H'),
    //   'key' => 'ctrl+h',
    //   'group' => 'other'
    // );

    // $settings['buttons']['code'] = array(
    //   'label' => '<i class="icon-code"></i>',
    //   'tip' => t('Code - Ctrl+K'),
    //   'key' => 'ctrl+k',
    //   'group' => 'other'
    // );

    /**
     * Groups
     */

    // $settings['groups']['font'] = array(
    //   'label' => 'Font Style',
    //   'weight' => 1
    // );

    // $settings['groups']['list'] = array(
    //   'label' => 'List',
    //   'weight' => 2
    // );

    // $settings['groups']['other'] = array(
    //   'label' => 'Other',
    //   'weight' => 3
    // );

    // // Sort groups
    // uasort($settings['groups'], 'drupal_sort_weight');

  }
}

/**
 * Implements hook_element_info_alter().
 */
function mee_element_info_alter(&$types) {
  foreach(mee_allowed_elements() as $element){
    if(isset($types[$element])){
      $types[$element]['#process'][] = 'mee_process_widget';
    }
  }
}

/**
 * Process callback.
 */
function mee_process_widget(&$element) {
  if (!isset($element['#entity_type'])) {
    return $element;
  }

  if(empty($element['#entity_type'])){
    $id = 'mee-config';
  }else{
    $id = str_replace('_','-','mee-'.$element['#entity_type'].'-'.$element['#bundle'].'-'.$element['#field_name']);
  }

  $field = field_info_field($element['#field_name']);
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
  $config = $instance['settings']['mee'];

  $settings = array(
    'selector' => '#'.$id,
    'autogrow' => $config['settings']['autogrow'],
    'labels_show' => $config['settings']['labels_show'],
    'view' => $config['settings']['view']
  );
  if(!empty($config['settings']['buttons'])){
    $plugins = mee_get_plugin('buttons');
    uasort($config['settings']['buttons'], 'drupal_sort_weight');
    $group = null;
    foreach($config['settings']['buttons'] as $name => $config){
      $type = substr($name, 0, 5);
      if($type === 'group'){
        $group = substr($name, 6);
        $settings['groups'][$group] = array(
          'label' => t($config['status']),
          'weight' => $config['weight'],
          'pos' => $group == 'right' ? 'right' : 'left',
        );
      }else{
        if(isset($plugins[$name]) && $config['status']){
          $handler = _mee_get_handler('buttons', $name);
          $group = !empty($config['pid']) ? substr($config['pid'], 6) : null;
          $settings['buttons'][$name] = array(
            'label' => $handler->getLabel(),
            'tip' => t($handler->getTip()),
            'key' => $handler->getKey(),
            'group' => !empty($group) ? $group : $handler->getGroup(),
          );
        }
      }
    }
  }
   mee_add_js($settings);

  $element['#resizable'] = FALSE;
  $element['#id'] = $id;
  $element['#attributes']['class'][] = 'mee-textarea';
  $element['#field_prefix'] = '<div id="wmd-button-bar"></div>';
  //$element[$key]['#value'] = "This is a **test** of *awesomness*\n\n - List item\n\n[enter link description here][1]\n\nThis is just a long bit of text so I can run tests\n\n##A really cool test\n\n###this is sooo stinking cool!\n\n [1]: http://www.google.com";
  //$element['#value'] = "[Google][1]\n\n[1]: http://google.com";

  return $element;
}

function mee_preprocess_html(&$vars) {
  //drupal_add_css(drupal_get_path('module', 'mee').'/css/application.css');
}

/**
 * Add all JavaScript needed for the editor to work.
 */
function mee_add_js($settings = NULL) {
  drupal_add_library('mee', 'mee', FALSE);
  if($settings && is_array($settings)){
    drupal_add_js(array('mee' => array($settings['selector'] => $settings)), 'setting');
  }
}

/**
 * Implements hook_library().
 */
function mee_library() {
  $path = drupal_get_path('module', 'mee');
  $libraries['mee'] = array(
    'title' => 'Mee',
    'version' => '0.1',
    'js' => array(
      //$path.'/js/mee.converter.js' => array(),
      //$path.'/js/mee.sanitizer.js' => array(),
      $path.'/js/mee.marked.js' => array(),
      $path.'/js/mee.editor.js' => array(),
      $path.'/js/mee.js' => array(),
    ),
    'css' => array(
      $path . '/css/mee.scss' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    )
  );

  return $libraries;
}

/**
* Implements hook_ctools_plugin_directory().
*/
function mee_ctools_plugin_directory($module, $plugin) {
  if ($module == 'mee') {
    return 'plugins/' . $plugin;
  }
}

/**
* Implements hook_ctools_plugin_type().
*
* Has plenty options. See ctools/help/plugins-creating.html
*/
function mee_ctools_plugin_type() {
  return array(
    'buttons' => array(
      'classes' => array('class'),
    ),
  );
}

/**
 * Fetch metadata for all mee plugins.
 *
 * @return
 *   An array of arrays with information about all available mee plugins.
 */
function mee_get_plugins() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('mee');
  // If you alter the plugins handler, be sure the new handler is registerd or
  // you include it in some other way.
  drupal_alter('mee_plugins', $plugins);
  return $plugins;
}

/**
 * Fetch metadata for one mee plugin by the given name.
 */
function mee_get_plugin($plugin_name) {
  ctools_include('plugins');
  $plugin = ctools_get_plugins('mee', $plugin_name);
  // If you alter the plugin handler, be sure the new handler is registerd or
  // you include it in some other way.
  drupal_alter('mee_plugin', $plugin);
  return $plugin;
}

/**
* Get the links handlers.
*
* @param $handler
* The links handler name.
*/
function _mee_get_handler($type, $name) {
  $object_cache = drupal_static(__FUNCTION__);
  if (!isset($object_cache[$name])) {
    ctools_include('plugins');
    $class = ctools_plugin_load_class('mee', $type, $name, 'class');
    $class = class_exists($class) ? $class : 'mee_'.ucfirst($type).'Handler_Broken';
    $all_args = func_get_args();
    $args = array_slice($all_args, 2);
    $object_cache[$name] = new $class($name, $args);
  }

  return $object_cache[$name];
}

function theme_mee_config_form_buttons($vars){
  $element = $vars['element'];
  $table_id = 'mee-button-sort';
  drupal_add_tabledrag($table_id, 'match', 'parent', 'mee-button-pid', 'mee-button-pid', 'mee-button-id', TRUE);
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'mee-button-weight', NULL, NULL, TRUE);
  $output = '';

  $header = array(
    'status' => t('Button'),
    'id' => '',
    'pid' => '',
    //'depth' => '',
    'weight' => t('Weight')
  );
  $rows = array();
  foreach (element_children($element) as $key) {
    $row = array();
    $row['class'] = array('draggable');
    $row['data'] = array();
    $type = substr($key, 0, 5);
    if($type === 'group'){
      $row['class'][] = 'tabledrag-root';
    }else{
      $row['class'][] = 'tabledrag-leaf';
    }
    $indent = theme('indentation', array(
      'size' => !empty($element[$key]['pid']['#value']) ? 1 : 0
    ));
    foreach ($header as $fieldname => $title) {
      $row['data'][] = $indent.drupal_render($element[$key][$fieldname]);
    }
    $rows[] = $row;
  }

  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id), // needed for table dragging
  ));

  $output .= drupal_render_children($element);
  return $output;
}
